#ifndef MATERIAL_H
#define MATERIAL_H

layout(location=0) out vec4 color_out;
layout(location=1) out vec4 normalAndSpec_out;

uniform bool translucent;

vec3 makeNormal3(vec2 normal2)
{
	float ny = sqrt(1.0 - dot(normal2, normal2));
	return vec3(normal2.x, ny, normal2.y);
}

vec2 smEncode(vec3 n)
{
	if (n.z < -0.999)
		n = normalize(n + vec3(0.0, 0.05, 0.0));
	float p = sqrt(n.z * 8.0 + 8.0);
	return n.xy / p + 0.5;
}

void writeMaterialOutputs(vec4 color, vec3 normal, float specIntensity, float specExponent)
{
	if (!translucent)
	{
		if (color.a < 0.2)
			discard;
		color /= color.a;
	}
	
	color_out = color;
	
	normalAndSpec_out = vec4(smEncode(normal), specIntensity / 100.0, specExponent / 100.0);
}

vec3 toWorldNormal(vec3 nmNormal)
{
	return normalize(nmNormal * (255.0 / 128.0) - vec3(1.0));
}

#endif
